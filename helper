#!/bin/bash
#
# Usage: ./helper newkey|update|show|expiry|help client-name

# These lines taken from https://stackoverflow.com/a/1638397
# Absolute path to this script, e.g. /home/user/pi/EosRemote/ssl/helper
SCRIPT=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/pi/EosRemote/ssl
SCRIPTPATH=$(dirname "$SCRIPT")

SSL_DIR=$SCRIPTPATH

CONF_FILE=-openssl.cnf
CERT_FILE=-cert.pem
KEY_FILE=-key.pem
CSR_FILE=-csr.pem

CA_DIR=$SSL_DIR/CA
CA_CONF=$SSL_DIR/ca$CONF_FILE
CA_CERT=$SSL_DIR/ca$CERT_FILE
CA_KEY=$CA_DIR/private/ca$KEY_FILE



usage() {
  echo "Usage: $0 newkey|update|show|expiry|help [client-name]"
}

help() {
  usage
  echo
  echo "newkey client-name  Creates a new RSA key for the client"
  echo "update client-name  Creates a new certificate for the client, from the key"
  echo "show client-name    Show the details of the client certificate"
  echo "expiry client-name  Show the expiry date/time of the client certificate"
  echo "help                Show this help text"
}



newkey_usage() {
  usage
}

newkey_help() {
  help
}

newkey_client() {
  newkey $SSL_DIR/$1$KEY_FILE
}

newkey_ca() {
  echo "newkey CA - not yet functional..."
  # newkey $CA_KEY
}

newkey() {
  local var YN=Y
  if [ -e $1 ]; then
    # Based on one of the answers here: https://stackoverflow.com/a/27875395
    read -p "Are you sure you want to replace the existing key (Y/n)? " YN
  fi
  case ${YN:0:1} in
    y|Y )
      openssl genrsa -out $1 2048
      ;;
    * )
      echo "Canceled"
      ;;
  esac
}



update_usage() {
  usage
}

update_help() {
  help
}

update_client() {
  update $SSL_DIR/$1$KEY_FILE $SSL_DIR/$1$CSR_FILE $SSL_DIR/$1$CONF_FILE $SSL_DIR/$1$CERT_FILE
}

update_ca() {
  echo "update CA - not yet functional..."
}

update() {
  echo "Create a new Certificate Request with existing Key..."
  openssl req -new -key $1 -out $2 -config $3
  echo "Use our CA to sign the Certificate Request..."
  # -batch  prevents openssl asking if we want to sign the certificate, and commit
  # -notext prevents the plain text details being included in the pem file
  # -create_serial creates the serial number file if it doesn't exist
  openssl ca -in $2 -out $4 -batch -create_serial -config $CA_CONF
  echo "...done!"
}



show_usage() {
  usage
}

show_help() {
  help
}

show_client() {
  show $SSL_DIR/$1$CERT_FILE
}

show_ca() {
  show $CA_CERT
}

show() {
  openssl x509 -in $1 -noout -text
}



expiry_usage() {
  usage
}

expiry_help() {
  help
}

expiry_client() {
  expiry $SSL_DIR/$1$CERT_FILE
}

expiry_ca() {
  expiry $CA_CERT
}

expiry() {
  local when=$(openssl x509 -in $1 -noout -enddate)
  echo "Expiry date/time: ${when:9}"
}



case $1 in
  update)
    case $2 in
      CA|ca|Ca|cA)
        update_ca
        ;;
      help)
        update_help
        ;;
      "")
        update_usage
        exit 1
        ;;
      *)
        update_client $2
        ;;
    esac
    ;;
  newKey|newkey|new_key)
    case $2 in
      CA|ca|Ca|cA)
        newkey_ca
        ;;
      help)
        newkey_help
        ;;
      "")
        newkey_usage
        exit 1
        ;;
      *)
        newkey_client $2
        ;;
    esac
    ;;
  show)
    case $2 in
      CA|ca|Ca|cA)
        show_ca
        ;;
      help)
        show_help
        ;;
      "")
        show_usage
        exit 1
        ;;
      *)
        show_client $2
        ;;
    esac
    ;;
  expiry|enddate)
    case $2 in
      CA|ca|Ca|cA)
        expiry_ca
        ;;
      help)
        expiry_help
        ;;
      "")
        expiry_usage
        exit 1
        ;;
      *)
        expiry_client $2
        ;;
    esac
    ;;
  help)
    case $2 in
      update)
        update_help
        ;;
      newKey|newkey|new_key)
        newkey_help
        ;;
      show)
        show_help
        ;;
      expiry|enddate)
        expiry_help
        ;;
      "")
        help
        ;;
      *)
        usage
        exit 1
        ;;
    esac
    ;;
  *)
    usage
    exit 1
    ;;
esac